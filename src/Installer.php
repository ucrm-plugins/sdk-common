<?php
declare(strict_types=1);

namespace SpaethTech\UCRM\SDK;

use Data\Tables\AppKeyTable as AppKeyData;
use Data\Tables\PluginTable as PluginData;
use SpaethTech\UCRM\SDK\Data\Database;

final class Installer
{
    private const SERVER_PLUGIN_ROOT = "/home/ucrm/data/ucrm/ucrm/data/plugins";
    private const DOCKER_PLUGIN_ROOT = "/data/ucrm/data/plugins";

    private const ENVIRONMENT_REMOTE = "REMOTE";
    private const ENVIRONMENT_SERVER = "SERVER";
    private const ENVIRONMENT_DOCKER = "DOCKER";

    // App Key is generated by:
    // $key = base64_encode(random_bytes(48));
    //
    // PLUGIN - An entry is added in the database table 'plugin' as follows:
    // name = <Plugin Name>
    // display_name = <Plugin Display Name>
    // description = <Plugin Description>
    // url = <Plugin Url - Repo>
    // author = <Plugin Author>
    // version = <Plugin Version>
    // min_ucrm_version = <Plugin Min UCRM Version>
    // max_ucrm_version = <Plugin Max UCRM Version>
    // enabled = <Plugin Enabled - Set to false on install>
    // execution_period = <Plugin Execution Period - Set to null when none>
    //
    // APP KEY - An entry is added in the database table 'app_key' as follows:
    // name = plugin_<Plugin Name>
    // key = <See Above>
    // type = TYPE_WRITE
    // created_date = <Current DateTime>
    // plugin_id = <Plugin ID>
    //
    // FILES - The following is done with the Plugin.src file:
    // If a plugin with the same name exists, the data/ path is staged (as a backup) in another directory, and then the
    // entire plugin directory is deleted and the files extracted from the archive.  Once complete, the data/ path is
    // restored.

    public static function environment(): string
    {
        if      (file_exists(self::SERVER_PLUGIN_ROOT)) $environment = self::ENVIRONMENT_SERVER;
        else if (file_exists(self::DOCKER_PLUGIN_ROOT)) $environment = self::ENVIRONMENT_DOCKER;
        else                                            $environment = self::ENVIRONMENT_REMOTE;

        return $environment;
    }

    public static function pluginRoot(): ?string
    {
        switch (self::environment())
        {
            case self::ENVIRONMENT_SERVER:  return self::SERVER_PLUGIN_ROOT;
            case self::ENVIRONMENT_DOCKER:  return self::DOCKER_PLUGIN_ROOT;
            case self::ENVIRONMENT_REMOTE:
            default:                        return null;
        }
    }


    private static function rrmdir($dir) {
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (is_dir($dir."/".$object))
                        self::rrmdir($dir."/".$object);
                    else
                        unlink($dir."/".$object);
                }
            }
            rmdir($dir);
        }
    }


    public static function install(string $zipFile): bool
    {
        $pluginRoot = self::pluginRoot();

        if(!$pluginRoot)
            return false;

        $zip = new \ZipArchive();

        if($zip->open($zipFile) !== true)
            return false;

        $manifest = json_decode($zip->getFromName("manifest.json"), true);

        $pluginPath = $pluginRoot."/".$manifest["information"]["name"];

        $update = file_exists($pluginPath);

        if($update)
        {
            // THEN the Plugin is already installed, so backup the necessary files and folders.

            $tempRoot = sys_get_temp_dir();
            $tempPath = $tempRoot."/plugins/".$manifest["information"]["name"];

            if(file_exists($tempPath))
                unlink($tempPath);

            mkdir($tempPath, 0755, true);

            if(!copy($pluginPath."/data", $tempPath."/data"))
                return false;

            if(!copy($pluginPath."/ucrm.json", $tempPath."/ucrm.json"))
                return false;

            self::rrmdir($pluginPath);

        }

        $zip->extractTo($pluginPath);

        if($update)
        {
            $tempRoot = sys_get_temp_dir();
            $tempPath = $tempRoot."/plugins/".$manifest["information"]["name"];

            if(!file_exists($tempPath))
                return false;

            if(!copy($tempPath."/data", $pluginPath."/data"))
                return false;

            if(!copy($tempPath."/ucrm.json", $pluginPath."/ucrm.json"))
                return false;
        }

        // =============================================================================================================
        // DATABASE
        // =============================================================================================================

        $pdo = Database::connect(
            getenv("POSTGRES_HOST"),
            (int)getenv("POSTGRES_PORT"),
            getenv("POSTGRES_DB"),
            getenv("POSTGRES_USER"),
            getenv("POSTGRES_PASSWORD")
        );

        if(!$pdo)
            return false;

        // -------------------------------------------------------------------------------------------------------------
        // DB: Insert/Update Plugin
        // -------------------------------------------------------------------------------------------------------------

        /** @var PluginData $existingPlugin */
        $existingPlugin = PluginData::where("name", "=", $manifest["information"]["name"])->first();

        $plugin = $existingPlugin ? $existingPlugin : (new PluginData())
            ->setEnabled(false)
            ->setExecutionPeriod(null);

        $plugin
            ->setName($manifest["information"]["name"])
            ->setDisplayName($manifest["information"]["displayName"])
            ->setDescription($manifest["information"]["description"])
            ->setUrl($manifest["information"]["url"])
            ->setAuthor($manifest["information"]["author"])
            ->setVersion($manifest["information"]["version"])
            ->setMinUcrmVersion($manifest["information"]["ucrmVersionCompliancy"]["min"])
            ->setMaxUcrmVersion($manifest["information"]["ucrmVersionCompliancy"]["max"]);

        /** @var PluginData $upsertedPlugin */
        $upsertedPlugin = $existingPlugin ? $plugin->update() : $plugin->insert();

        // -------------------------------------------------------------------------------------------------------------
        // DB: Insert/Update App Key
        // -------------------------------------------------------------------------------------------------------------

        /** @var AppKeyData $existingAppKey */
        $existingAppKey = AppKeyData::where("plugin_id", "=", $upsertedPlugin->getId())->first();

        $appKey = $existingAppKey ? $existingAppKey : (new AppKeyData())
            ->setKey(base64_encode(random_bytes(48)))
            ->setType("TYPE_WRITE")
            ->setCreatedDate(new \DateTime())
            ->setLastUsedDate(null)
            ->setPluginId($upsertedPlugin->getId())
            ->setDeletedAt(null);

        $appKey
            ->setName("plugin_".$manifest["information"]["name"]);

        /** @var PluginData $upsertedAppKey */
        $upsertedAppKey = $existingAppKey ? $appKey->update() : $appKey->insert();








        return true;
    }






}
